= GELF

This is the new GELF gem written by Alexey Palazhchenko. It is based on the old gem by Lennart Koopmann and allows you to send GELF messages to Graylog2 server instances. See http://www.graylog2.org/about/gelf for more information about GELF and http://rdoc.info/github/Graylog2/gelf-rb/master/frames for API documentation.

Works with Ruby 1.8.7, 1.9.x.,2.0.x and 2.1.x
Works with Jruby 1.7.x + jruby-openssl >= 0.9.7

{<img src="https://travis-ci.org/Graylog2/gelf-rb.png?branch=master" alt="Build Status" />}[https://travis-ci.org/Graylog2/gelf-rb]

== Usage
=== Gelf::Notifier

This allows you to sent arbitary messages via UDP to your Graylog2 server.

  n = GELF::Notifier.new("localhost", 12201)

  # Send with custom attributes and an additional parameter "foo"
  n.notify!(:short_message => "foo", :full_message => "something here\n\nbacktrace?!", :_foo => "bar")

  # Pass any object that responds to .to_hash
  n.notify!(Exception.new)

=== Gelf::Logger

The Gelf::Logger is compatible with the standard Ruby Logger interface and can be used interchangeably.
Under the hood it uses Gelf::Notifier to send log messages via UDP to Graylog2.

  logger = GELF::Logger.new("localhost", 12201, "WAN", { :facility => "appname" })

  logger.debug "foobar"
  logger.info "foobar"
  logger.warn "foobar"
  logger.error "foobar"
  logger.fatal "foobar"

  logger << "foobar"

Since it's compatible with the Logger interface, you can also use it in your Rails application:

  # config/environments/production.rb
  config.logger = GELF::Logger.new("localhost", 12201, "WAN", { :facility => "appname" })


=== Sending GELF logs using TCP instead of UDP (default) with TLS support

This fork adds TCP support to GELF using _@zsprackett_'s pull
request:https://github.com/Graylog2/gelf-rb/pull/21 on the
parent gelf-rb repository.

An example of how it can be used is as folllows. In your GELF::Logger
initialization, you define a protocol key.

  logger = GELF::Logger.new("localhost", 12201, "WAN", { :facility => "appname",
    :protocol: GELF::Protocol::TCP})

This fork add TLS support for TCP https://github.com/edefaria/gelf-rb based of the previous fork.

An example of how to use TLS encryption with a good level of security.
  logger = GELF::Logger.new("localhost", 12201, "WAN", { :facility => "appname" }, nil,
    { :protocol: GELF::Protocol::TCP, :tls: true, :tcp_retry => "0", :check_ssl: true, :tls_version: "TLSv1_2" })

Current config_config for tcp:
:protocol => The GELF protocol (TCP or UDP).
:tls => TLS option (true/false) to add TLS encryption for TCP protocol
:tls_version => Force a TLS version (like "TLSv1_2") when TCP/TLS protocol is used
:check_ssl => Check SSL trusted certificate (true/flase) when TCP/TLS protocol is used
:tcp_retry => Number of TCP retry to send a message
:tcp_retry_ms => Number of ms to wait between each TCP retry

== Note on Patches/Pull Requests

* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010-2013 Lennart Koopmann and Alexey Palazhchenko. See LICENSE for details.
